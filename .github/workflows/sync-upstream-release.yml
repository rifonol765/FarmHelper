name: Sync Upstream Release and Build

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    # Runs every hour (adjust cron schedule as needed)
    # See https://crontab.guru/ for help
    - cron: '0 * * * *'

jobs:
  sync_and_build:
    runs-on: ubuntu-latest
    # Prevent multiple runs if scheduled trigger overlaps with commits
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout Fork Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history so we can check for existing tags and merge
          fetch-depth: 0
          # Use PAT to allow pushing merge commits and creating releases
          token: ${{ secrets.GH_PAT }} # Ensure this secret exists in your fork

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote
        # Upstream repository set here
        run: git remote add upstream https://github.com/JellyLabScripts/FarmHelper.git

      - name: Fetch Upstream Tags
        run: git fetch upstream --tags

      - name: Install GitHub CLI
        uses: github/hub@v2.14.2 # Installs 'hub', which bundles 'gh' CLI

      - name: Install jq (JSON Processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Latest Upstream Release Info
        id: upstream_release
        env:
          # Use built-in token for read-only API access here
          GH_TOKEN: ${{ github.token }}
          # Upstream repository set here
          UPSTREAM_REPO: JellyLabScripts/FarmHelper
        run: |
          echo "Fetching latest release tag from $UPSTREAM_REPO..."
          # Get the tag name of the very latest release (stable or pre-release)
          latest_release_tag_json=$(gh release list --repo $UPSTREAM_REPO --limit 1 --json tagName)

          if [[ -z "$latest_release_tag_json" || "$latest_release_tag_json" == "[]" ]]; then
            echo "No releases found on upstream repository $UPSTREAM_REPO."
            echo "No new release found. Exiting cleanly."
            exit 0 # Exit successfully
          fi

          tag_name=$(echo "$latest_release_tag_json" | jq -r '.[0].tagName')

          # Check if tag_name is empty or null
          if [[ -z "$tag_name" || "$tag_name" == "null" ]]; then
            echo "Could not extract tag name from the latest release listing."
            exit 1 # Exit with error
          fi

          echo "Latest upstream tag found: $tag_name"
          echo "Fetching details for tag $tag_name..."

          # Now view the specific release details using the tag_name
          release_details_json=$(gh release view "$tag_name" --repo $UPSTREAM_REPO --json tagName,isPrerelease,name,body)

          if [[ -z "$release_details_json" ]]; then
             echo "Could not fetch details for release tag $tag_name."
             exit 1 # Exit with error
          fi

          echo "Full release details: $release_details_json"
          # Re-verify tag name just in case, though it should match
          fetched_tag_name=$(echo "$release_details_json" | jq -r '.tagName')
          is_prerelease=$(echo "$release_details_json" | jq -r '.isPrerelease')
          release_name=$(echo "$release_details_json" | jq -r '.name')
          release_body=$(echo "$release_details_json" | jq -r '.body')

          # Final check if details were retrieved correctly
          if [[ -z "$fetched_tag_name" || "$fetched_tag_name" == "null" ]]; then
             echo "Could not extract details from release view for tag $tag_name."
             exit 1
          fi

          # Set outputs using the confirmed tag name from the initial list command
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "is_prerelease=$is_prerelease" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          # Handle multi-line body for output
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Check if Tag Already Exists in Fork
        id: check_tag
        run: |
          # Check local tags (we fetched upstream tags, but release uses fork tags)
          if git rev-parse --verify --quiet "refs/tags/${{ steps.upstream_release.outputs.tag_name }}"; then
            echo "Tag ${{ steps.upstream_release.outputs.tag_name }} already exists in fork. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ steps.upstream_release.outputs.tag_name }} does not exist in fork. Proceeding."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Merge Upstream Tag
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          # IMPORTANT: Replace 'main' if your default branch is different (e.g., 'master')
          DEFAULT_BRANCH=main
          git checkout $DEFAULT_BRANCH
          echo "Pulling latest changes from fork's origin $DEFAULT_BRANCH..."
          git pull origin $DEFAULT_BRANCH
          echo "Attempting to merge upstream tag ${{ steps.upstream_release.outputs.tag_name }} into $DEFAULT_BRANCH..."
          # Merge the specific tag, creating a merge commit even if fast-forward is possible
          # If merge conflicts occur, this step will fail the workflow run.
          git merge "refs/tags/${{ steps.upstream_release.outputs.tag_name }}" --no-ff -m "Merge upstream tag ${{ steps.upstream_release.outputs.tag_name }}" || {
            echo "Merge failed. Please resolve conflicts manually."
            exit 1
          }

      - name: Push Merge Commit
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          # IMPORTANT: Replace 'main' if your default branch is different
          DEFAULT_BRANCH=main
          echo "Pushing merge commit to origin/$DEFAULT_BRANCH..."
          git push origin $DEFAULT_BRANCH

      # --- Your Original Build Steps (adapted) ---

      - uses: actions/setup-java@v4
        name: Setup Java
        if: steps.check_tag.outputs.skip == 'false'
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/actions/setup-gradle@v3
        name: Setup Gradle
        if: steps.check_tag.outputs.skip == 'false'

      - name: Execute Gradle build
        if: steps.check_tag.outputs.skip == 'false'
        # Assuming the gradle wrapper is at the root
        run: ./gradlew build

      - name: Create Fork Release
        if: steps.check_tag.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag, name, body, and prerelease status from the upstream release
          tag_name: ${{ steps.upstream_release.outputs.tag_name }}
          name: ${{ steps.upstream_release.outputs.release_name }}
          body: ${{ steps.upstream_release.outputs.release_body }}
          prerelease: ${{ steps.upstream_release.outputs.is_prerelease == 'true' }}
          files: |
            build/libs/*.jar # Make sure this path correctly points to your built artifact(s)
          # Use the PAT for creating the release in your fork
          token: ${{ secrets.GH_PAT }} # Ensure this secret exists in your fork

      # Optional: Add steps here to notify via Discord etc., using the release info
      # from steps.upstream_release.outputs and the build artifact path.
