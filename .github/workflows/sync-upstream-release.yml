# .github/workflows/sync-upstream-release.yml

name: Sync Upstream Release and Build

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    # Runs every hour (adjust as needed)
    - cron: '0 * * * *'

jobs:
  sync_and_build:
    runs-on: ubuntu-latest # gh and jq are pre-installed here
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      # 1. Checkout the fork repository
      - name: Checkout Fork Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      # 2. Configure Git user
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3. Add the upstream repository as a remote
      - name: Add Upstream Remote
        run: git remote add upstream https://github.com/JellyLabScripts/FarmHelper

      # 4. Install necessary tools - REMOVED!
      # - name: Install GitHub CLI  # NO LONGER NEEDED
      #   uses: github/hub@v2.14.2   # NO LONGER NEEDED
      # - name: Install jq (JSON Processor) # NO LONGER NEEDED
      #   run: sudo apt-get update && sudo apt-get install -y jq # NO LONGER NEEDED

      # 5. Get info about the LATEST release from UPSTREAM
      #    (This step uses 'gh' and 'jq' directly - they are already available)
      - name: Get Latest Upstream Release Info
        id: upstream_release
        env:
          GH_TOKEN: ${{ github.token }}
          UPSTREAM_REPO: JellyLabScripts/FarmHelper
        run: |
          echo "Fetching latest release tag from $UPSTREAM_REPO..."
          # gh and jq commands work because they are pre-installed
          latest_release_tag_json=$(gh release list --repo $UPSTREAM_REPO --limit 1 --json tagName)
          # ... (rest of the gh/jq script remains the same) ...
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          release_details_json=$(gh release view "$tag_name" --repo $UPSTREAM_REPO --json isPrerelease,name,body)
          # ... (rest of the gh/jq script remains the same) ...
          echo "Successfully retrieved upstream release details."

      # 6. Check if a release with this EXACT tag already exists in THIS fork
      #    (This step uses 'gh' directly)
      - name: Check if Release Exists in Fork for this Tag
        id: check_fork_release
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          FORK_REPO: ${{ github.repository }}
          TAG_NAME: ${{ steps.upstream_release.outputs.tag_name }}
        run: |
          echo "Checking for existing release with tag '$TAG_NAME' in fork repository '$FORK_REPO'..."
          # gh command works because it's pre-installed
          if gh release view "$TAG_NAME" --repo "$FORK_REPO" > /dev/null 2>&1; then
            echo "Release with tag '$TAG_NAME' already exists... Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Release with tag '$TAG_NAME' does not exist... Proceeding."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      # 7. Fetch ONLY the required tag and master branch from upstream (if needed)
      - name: Fetch Specific Upstream Tag and Master Branch
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          # ... (git fetch commands remain the same) ...

      # 8. Merge the fetched upstream tag (if needed)
      - name: Merge Upstream Tag
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          # ... (git merge commands remain the same) ...

      # 9. Push the merge commit (if needed)
      - name: Push Merge Commit
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          # ... (git push command remains the same) ...

      # --- Build Steps (Run only if merge happened) ---

      # 10. Set up Java environment
      - uses: actions/setup-java@v4
        name: Setup Java
        if: steps.check_fork_release.outputs.skip == 'false'
        with:
          distribution: temurin
          java-version: 17

      # 11. Set up Gradle environment (Includes Caching)
      - uses: gradle/actions/setup-gradle@v3 # This action handles Gradle caching
        name: Setup Gradle
        if: steps.check_fork_release.outputs.skip == 'false'

      # 12. Execute the Gradle build command
      - name: Execute Gradle build
        if: steps.check_fork_release.outputs.skip == 'false'
        run: ./gradlew build

      # 13. List build artifacts (for verification)
      - name: List build artifacts
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          echo "Listing contents of build/libs:"
          ls -l build/libs || echo "build/libs directory not found or empty."

      # 14. Create the release in the fork (if needed)
      - name: Create Fork Release
        if: steps.check_fork_release.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          # ... (release details remain the same) ...
          files: |
            build/libs/*.jar
          token: ${{ secrets.GH_PAT }}
