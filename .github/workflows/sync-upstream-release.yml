# .github/workflows/sync-upstream-release.yml

name: Sync Upstream Release and Build

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    # Runs every hour (adjust cron schedule as needed)
    # See https://crontab.guru/ for help
    - cron: '0 * * * *'

jobs:
  sync_and_build:
    runs-on: ubuntu-latest
    # Prevent multiple runs if scheduled trigger overlaps with commits
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout Fork Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history so we can check for existing tags and merge
          fetch-depth: 0
          # Use PAT to allow pushing merge commits and creating releases
          token: ${{ secrets.GH_PAT }} # Ensure this secret exists in your fork

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote
        # Use the URL without .git for HTTPS
        run: git remote add upstream https://github.com/JellyLabScripts/FarmHelper

      - name: Check Remotes and Connectivity # ADDED DEBUG STEP
        run: |
          echo "--- Configured Remotes ---"
          git remote -v
          echo "--- Testing Connectivity to Upstream ---"
          # Try getting headers from upstream repo page
          curl -I https://github.com/JellyLabScripts/FarmHelper.git

      - name: Fetch Upstream Tags # ADD GIT TRACE ENV VARS
        env:
          GIT_TRACE: 1         # Enable basic Git tracing
          GIT_CURL_VERBOSE: 1  # Make Git's curl operations verbose
        run: |
          echo "Fetching upstream tags with maximum verbosity..."
          # The -v flag is still useful alongside the env vars
          git fetch upstream --tags -v

      - name: Install GitHub CLI
        uses: github/hub@v2.14.2 # Installs 'hub', which bundles 'gh' CLI

      - name: Install jq (JSON Processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Latest Upstream Release Info # CORRECTED VERSION
        id: upstream_release
        env:
          # Use built-in token for read-only API access here
          GH_TOKEN: ${{ github.token }}
          # Upstream repository set here
          UPSTREAM_REPO: JellyLabScripts/FarmHelper
        run: |
          echo "Fetching latest release tag from $UPSTREAM_REPO..."
          latest_release_tag_json=$(gh release list --repo $UPSTREAM_REPO --limit 1 --json tagName)

          if [[ -z "$latest_release_tag_json" || "$latest_release_tag_json" == "[]" ]]; then
            echo "No releases found on upstream repository $UPSTREAM_REPO."
            echo "No new release found. Exiting cleanly."
            exit 0 # Exit successfully
          fi

          tag_name=$(echo "$latest_release_tag_json" | jq -r '.[0].tagName')

          if [[ -z "$tag_name" || "$tag_name" == "null" ]]; then
            echo "Could not extract tag name from the latest release listing."
            exit 1 # Exit with error
          fi

          echo "Latest upstream tag found: $tag_name"
          echo "Fetching details for tag $tag_name..."

          release_details_json=$(gh release view "$tag_name" --repo $UPSTREAM_REPO --json tagName,isPrerelease,name,body)

          if [[ -z "$release_details_json" ]]; then
             echo "Could not fetch details for release tag $tag_name."
             exit 1 # Exit with error
          fi

          echo "Full release details: $release_details_json"
          fetched_tag_name=$(echo "$release_details_json" | jq -r '.tagName')
          is_prerelease=$(echo "$release_details_json" | jq -r '.isPrerelease')
          release_name=$(echo "$release_details_json" | jq -r '.name')
          release_body=$(echo "$release_details_json" | jq -r '.body')

          if [[ -z "$fetched_tag_name" || "$fetched_tag_name" == "null" ]]; then
             echo "Could not extract details from release view for tag $tag_name."
             exit 1
          fi

          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "is_prerelease=$is_prerelease" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if Release Exists in Fork for this Tag # CORRECTED CHECK
        id: check_fork_release
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          FORK_REPO: ${{ github.repository }}
          TAG_NAME: ${{ steps.upstream_release.outputs.tag_name }}
        run: |
          echo "Checking for existing release with tag '$TAG_NAME' in fork repository '$FORK_REPO'..."
          if gh release view "$TAG_NAME" --repo "$FORK_REPO" > /dev/null 2>&1; then
            echo "Release with tag '$TAG_NAME' already exists in the fork '$FORK_REPO'. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Release with tag '$TAG_NAME' does not exist in the fork '$FORK_REPO'. Proceeding."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Merge Upstream Tag
        # Use the corrected check step ID and updated branch name
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          # UPDATED: Use 'master' as the default branch
          DEFAULT_BRANCH=master
          git checkout $DEFAULT_BRANCH
          echo "Pulling latest changes from fork's origin $DEFAULT_BRANCH..."
          git pull origin $DEFAULT_BRANCH
          echo "Attempting to merge upstream tag ${{ steps.upstream_release.outputs.tag_name }} into $DEFAULT_BRANCH..."
          git merge "refs/tags/${{ steps.upstream_release.outputs.tag_name }}" --no-ff -m "Merge upstream tag ${{ steps.upstream_release.outputs.tag_name }}" || {
            echo "Merge failed. Please resolve conflicts manually."
            exit 1
          }

      - name: Push Merge Commit
        # Use the corrected check step ID and updated branch name
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          # UPDATED: Use 'master' as the default branch
          DEFAULT_BRANCH=master
          echo "Pushing merge commit to origin/$DEFAULT_BRANCH..."
          git push origin $DEFAULT_BRANCH

      # --- Build Steps ---

      - uses: actions/setup-java@v4
        name: Setup Java
        if: steps.check_fork_release.outputs.skip == 'false'
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/actions/setup-gradle@v3
        name: Setup Gradle
        if: steps.check_fork_release.outputs.skip == 'false'

      - name: Execute Gradle build
        if: steps.check_fork_release.outputs.skip == 'false'
        run: ./gradlew build

      # --- Debug Artifact Location ---
      - name: List build artifacts
        if: steps.check_fork_release.outputs.skip == 'false'
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing contents of build/:"
          ls -l build || echo "build directory not found."
          echo "Listing contents of build/libs:"
          ls -l build/libs || echo "build/libs directory not found or empty."
          echo "Listing all JAR files under build/:"
          find build -name '*.jar' || echo "No .jar files found under build/."

      # --- Create Release ---
      - name: Create Fork Release
        if: steps.check_fork_release.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.upstream_release.outputs.tag_name }}
          name: ${{ steps.upstream_release.outputs.release_name }}
          body: ${{ steps.upstream_release.outputs.release_body }}
          prerelease: ${{ steps.upstream_release.outputs.is_prerelease == 'true' }}
          # IMPORTANT: Verify this path based on the 'List build artifacts' step output
          files: |
            build/libs/*.jar
          token: ${{ secrets.GH_PAT }} # Use PAT for release creation

      # Optional: Add steps here to notify via Discord etc., using the release info
      # from steps.upstream_release.outputs and the build artifact path.
